package javaCalculator;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class SimpleCalculator extends JFrame implements ActionListener{
	
	JFrame frame;
	JTextField textfield;
	JPanel panel;

// Create JButton for numbers
	JButton[] numbers = new JButton[11];

// Declare labels to connect to JButton numbers later on 
	String[] numbersLabel = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "00"};

//Create JButton for calculators functionalities
	JButton [] functions = new JButton [9];

// Declare labels to connect to JButton functionalities later on
	String[] functionsLabel = {"+","-", "*", "/", "C", "%", "‚Üê", ".", "="};
	
Font mainFont = new Font("Segoe UI", Font.BOLD, 25);
	
//use for switch case and operations
char mathOps;
	double type1 = 0, type2 = 0, result=0;
	
// Method definition
	SimpleCalculator(){
		
		this.setSize(450,500);
		this.setTitle("Jex Calculator");
		this.setResizable(false);
		this.setLayout(null); 
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		textfield = new JTextField();
		textfield.setBounds(50, 25, 300, 50);
		textfield.setEditable(false);
		textfield.setFont(mainFont);

		// Connect JButton numbers to an array of labels
		for(int i = 0; i < numbers.length; i++) {
			numbers[i] = new JButton(numbersLabel[i]);
			numbers[i].setFont(mainFont);
			numbers[i].setFocusable(false);
			numbers[i].setForeground(Color.BLUE);
			numbers[i].addActionListener(this);
		}
		
// Connect JButton functionalities to an array of labels
		for(int i = 0; i < functions.length; i++) {
			functions[i] = new JButton(functionsLabel[i]);
			functions[i].setFont(mainFont);
			functions[i].setFocusable(false);
			functions[i].addActionListener(this);	
		}
		
		//colors
		functions[0].setBackground(Color.ORANGE);
		functions[1].setBackground(Color.ORANGE);
		functions[2].setBackground(Color.ORANGE);
		functions[3].setBackground(Color.ORANGE);
		functions[5].setBackground(Color.ORANGE);
		functions[7].setBackground(Color.ORANGE);

		functions[4].setBackground(Color.RED);
		functions[6].setBackground(Color.RED);
		
		functions[8].setBackground(Color.GREEN);

		// Create a panel and arranged the buttons
  panel = new JPanel();
		panel.setBounds(50, 100, 300, 300);
		panel.setLayout(new GridLayout(5,4,10,10));
		
		//first row
		panel.add(functions[4]);
		panel.add(functions[5]);
		panel.add(functions[6]);
		panel.add(functions[3]);
		
		//second row
		panel.add(numbers[7]);
		panel.add(numbers[8]);
		panel.add(numbers[9]);
		panel.add(functions[2]);

		//third row
		panel.add(numbers[4]);
		panel.add(numbers[5]);
		panel.add(numbers[6]);
		panel.add(functions[1]);
		
		//fourth row
		panel.add(numbers[3]);
		panel.add(numbers[2]);
		panel.add(numbers[1]);
		panel.add(functions[0]);
		
		//fifth row
		panel.add(numbers[0]);
		panel.add(numbers[10]);
		panel.add(functions[7]);
		panel.add(functions[8]);
		
		this.add(textfield);
		this.add(panel);
		this.setVisible(true);
	}

	public static void main(String[] args) {

// Call the method
		SimpleCalculator calculator = new SimpleCalculator();

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		
		for(int i=0; i<10; i++) {
			if(e.getSource() == numbers[i]) {
				textfield.setText(textfield.getText().concat(String.valueOf(i)));
			}
		}
		if(e.getSource() == functions[0]) {
			type1 = Double.parseDouble(textfield.getText());
			mathOps  = '+';
			textfield.setText("");
		} 
		if(e.getSource() == functions[1]) {
			type1 = Double.parseDouble(textfield.getText());
			mathOps  = '-';
			textfield.setText("");
		}
		if(e.getSource() == functions[2]) {
			type1 = Double.parseDouble(textfield.getText());
			mathOps  = '*';
			textfield.setText("");
		}
		if(e.getSource() == functions[3]) {
			type1 = Double.parseDouble(textfield.getText());
			mathOps  = '/';
			textfield.setText("");
		}
		if(e.getSource() == functions[4]) {
			textfield.setText("");
		}
		if(e.getSource() == functions[5]) {
			type1 = Double.parseDouble(textfield.getText());
			mathOps  = '%';
			textfield.setText("");
		}
		if(e.getSource() == functions[6]) {
			String values = textfield.getText();
			textfield.setText("");
			for(int i=0; i < values.length()-1; i++) {
				textfield.setText(textfield.getText()+values.charAt(i));
			}
		}
		if(e.getSource() == functions[7]) {
			textfield.setText(textfield.getText().concat("."));
		}
		if(e.getSource() == functions[8]) {
			type2 = Double.parseDouble(textfield.getText());
			
			switch(mathOps) {
			case '+':
				result = type1 +type2;
				break;
			case '-':
				result = type1 - type2;
				break;
			case '*':
				result = type1 * type2;
				break;
			case '/':
				result = type1 / type2;
				break;
			case '%':
				result = (type1 * type2) /100;
			default:
				break;
			}
			textfield.setText(String.valueOf(result));
			type1 = result;
		}
	}
}
